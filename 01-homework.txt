Housekeeping:

- I have created an email list for just us (Keenan, Samuel, Isaac, Nick, Josh, Michael, and myself). If you want me to add someone else (such as a parent), just let me know.

- I have put our small script from tonight and this homework file onto GitHub. I will invite each of you to join the repository, so look for an email about that soon.

- Even without joining the repository, however, you should be able to see and download files, since it is a public repository. You don't need to understand git or GitHub yet - just use it to look for files. The project URL is https://github.com/sql-sith/cdc2017-summer.

- If you are interested in those interesting-looking books I showed you a bit of tonight, they can be found at the following links. Best of all, I found out after our meeting Tuesday night that these are all free to read online!
https://automatetheboringstuff.com/
https://inventwithpython.com/chapters/
https://inventwithpython.com/pygame/chapters/
https://inventwithpython.com/hacking/chapters/
Also, if you want to use the Python code visualizer (called Python Tutor), you can find it at http://www.pythontutor.com/visualize.html#mode=edit.
Finally, here is this week's homework. As mentioned before, I am emailing it this week but am also posting it to GitHub. Once we are comfortable with GitHub, we'll just post things there (and you can use it to tell me when you are having problems). Try your best on these two problems, but don't get discouraged if they are hard for you, especially if you are a new programmer. Just like problem solving is the most important skill a programmer can have, it's also true that the more you code, the better you get at solving problems with code.

================================================

1. Fibonacci

The Fibonacci series starts with 1, 1, and then each successive number is the sum of the previous two. Write a script where you can supply a variable n that is an int, and the program will calculate the nth Fibonacci number.

Eg:
- Fibonacci(5) = 5
- Fibonacci(20) = 6765

2. Square root

Write a script that can calculate the square root of a number n by trial and error.
Find a way to determine if your current best guess is too low, too high, or "close
enough," meaning that if you square your candidate number, then you get an answer
within 0.001 of the target n.

Eg:
- SquareRoot(2) could be 1.4139, because 1.4139 squared is within 0.001 of 2.
- SquareRoot(100) is 10, but 9.99999 would be acceptable since 9.99999 * 9.99999 is within 0.001 of 100.

================================================

Let me know if you have any questions.

Thanks!
Chris